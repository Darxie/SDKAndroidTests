plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 34
    ndkVersion "21.1.6352462"
    defaultConfig {
        applicationId "com.sygic.sdk.test.android"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // use your own SDK client ID
        buildConfigField "String", "SYGIC_SDK_CLIENT_ID", getSdkClientId()
        buildConfigField "String", "LICENSE_KEY", getSdkLicenseKey()

        if (gradle.wantsToBuildSdkFromSource) {
            missingDimensionStrategy 'build', 'development'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    sourceSets {
        androidTest {
            assets.srcDirs = ['src/main/assets']
        }
    }
    namespace 'cz.feldis.sdkandroidtests'
}

def getSdkVersion() {
    Properties properties = new Properties()
    def localProperties = new File(project.rootDir, 'local.properties')
    if (!localProperties.exists())
        throw new GradleScriptException("File local.properties doesn\'t exist")
    properties.load(localProperties.newDataInputStream())
    String version = properties.getProperty('sygic.sdk.version')
    if (version == null)
        throw new GradleScriptException("Property sygic.sdk.version is not set")

    return version
}

def getSdkClientId() {
    def sdkClientId = ""

    def localProperties = project.rootProject.file('local.properties')
    if (localProperties.exists()) {
        Properties properties = new Properties()
        properties.load(localProperties.newDataInputStream())
        sdkClientId = properties.getProperty('sygic.sdk.client.id', "")
    }

    if (sdkClientId.isEmpty()) {
        logger.error('Missing Client ID for Sygic Maps SDK! Define one in local.properties as sygic.sdk.client.id="YOUR.CLIENT.ID"')
    }

    return sdkClientId
}

def getSdkLicenseKey() {
    def sdkLicenseKey = ""

    def localProperties = project.rootProject.file('local.properties')
    if (localProperties.exists()) {
        Properties properties = new Properties()
        properties.load(localProperties.newDataInputStream())
        sdkLicenseKey = properties.getProperty('license.key', "")
    }

    if (sdkLicenseKey.isEmpty()) {
        logger.error('Missing License Key for Sygic Maps SDK! Define one in local.properties as license.key="jwt"')
    }

    return sdkLicenseKey
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-ktx:+'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'

    if (!gradle.wantsToBuildSdkFromSource()) {
        // use aar from maven
        api("com.sygic.sdk:maps-android:${getSdkVersion()}@aar") {
            exclude group: 'com.google.android.gms'
            exclude group: 'androidx.core', module: 'core-ktx'
            transitive true
        }
    } else {
        // compile sdk yourself (with correctly included sdk module of course)
        api project(':sdk')
    }

    implementation 'com.google.android.material:material:1.8.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    androidTestImplementation 'org.mockito:mockito-android:5.1.1'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
}